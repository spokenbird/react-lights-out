{"version":3,"sources":["Cell.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","coord","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","board","createBoard","flipCellsAround","simulateClicks","numClicks","i","nrows","row","push","j","ncols","num","console","log","firstRandCoord","Math","floor","random","secondRandCoord","coordToFlip","concat","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","setState","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","arr","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","_this2","isFalse","viewBox","id","textAnchor","xlinkHref","ridx","key","cell","cidx","src_Cell_0","defaultProps","chanceLightStartsOn","Game","mode","preventDefault","e","src_Board_0","App","src_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b116ceaa.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.coord);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n      <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.75 // 25% chance of lighting up\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: this.createBoard(),\n    };\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    this.simulateClicks(this.props.numClicks);\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < this.props.nrows; i++) {\n      let row = [];\n      board.push(row)\n      for (let j = 0; j < this.props.ncols; j++) {\n        row.push(false); // all are lit off \n      }\n    }\n    return board\n  }\n\n\n  simulateClicks(num, board) {\n    console.log(this.props.nrows);\n    for (let i = 0; i < num; i++) {\n      let firstRandCoord = Math.floor(Math.random() * this.props.nrows);\n      let secondRandCoord = Math.floor(Math.random() * this.props.nrows);\n      let coordToFlip = `${firstRandCoord}-${secondRandCoord}`;\n      this.flipCellsAround(coordToFlip);\n    }\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y, x);\n\n    flipCell(y + 1, x);\n    flipCell(y - 1, x);\n    flipCell(y, x + 1);\n    flipCell(y, x - 1);\n    // win when every cell is turned off\n\n    this.setState({ board });\n  }\n\n\n  isFalse(board) {\n    for (const arr of board) {\n      for (const item of arr) {\n        if (item !== false) return false;\n      }\n    }\n    return true;\n  }\n  /** Render game board or winning message. */\n\n  render() {\n    if (this.isFalse(this.state.board)) {\n      return (\n        <svg viewBox=\"0 0 960 300\">\n        <symbol id=\"s-text\">\n          <text textAnchor=\"middle\" x=\"50%\" y=\"80%\">You win!</text>\n        </symbol>\n        <g className=\"g-ants\">\n          <use xlinkHref=\"#s-text\" className=\"text-copy\" />\n          <use xlinkHref=\"#s-text\" className=\"text-copy\" />\n          <use xlinkHref=\"#s-text\" className=\"text-copy\" />\n          <use xlinkHref=\"#s-text\" className=\"text-copy\" />\n          <use xlinkHref=\"#s-text\" className=\"text-copy\" />\n        </g>\n      </svg>\n      )\n    }\n    else {\n      return (\n        <div>\n          <p className=\"my-3\">Click on lights to put them out, win when all the lights are out!</p>\n          <table className=\"game-board d-flex justify-content-center\">\n            <tbody>\n              {this.state.board.map((row, ridx) => (\n                <tr key={ridx}>\n                  {row.map((cell, cidx) =>\n                    <Cell\n                      key={`${ridx}-${cidx}`}\n                      coord={`${ridx}-${cidx}`}\n                      isLit={this.state.board[ridx][cidx]}\n                      flipCellsAroundMe={this.flipCellsAround}\n                    />)}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )\n    }\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from 'react'\nimport Board from \"./Board\"\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: \"\"\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt, mode) {\n    evt.preventDefault();\n    this.setState({\n      mode\n    })\n  }\n\n\n  render() {\n    return (<div >\n      <h1> Choose Your Difficulty</h1>\n      <button className=\"btn btn-outline-success mx-1\" onClick={(e) => { this.handleClick(e, 'easy') }}>Easy</button>\n      <button className=\"btn btn-outline-warning mx-1\" onClick={(e) => { this.handleClick(e, 'medium') }}>Medium</button>\n      <button className=\"btn btn-outline-danger mx-1\"onClick={(e) => { this.handleClick(e, 'hard') }}>Hard</button>\n      {this.state.mode === 'easy' ? < Board nrows={4} ncols={4} numClicks={4} /> : null}\n      {this.state.mode === 'medium' ? < Board nrows={5} ncols={5} numClicks={5} /> : null}\n      {this.state.mode === 'hard' ? < Board nrows={5} ncols={5} numClicks={7} /> : null}\n    </div >\n    )\n  }\n}\n\nexport default Game","import React, {Component} from 'react';\nimport Game from './Game';\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n          <Game/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}